#!/usr/bin/env python3
# pyright: reportMissingImports=false

import time
from queue import LifoQueue

class Scanner():
    def __init__(self, uss, 
                        ls,
                        tilter_motor,
                        scanner_motor,
                        rotate_motor,
                        leds,
                        btn,
                        cuber,
                        program_manager,
                        ):
        # cuber
        self.cuber = cuber
        self.program = program_manager

        # Motors and Sensors
        self.uss = uss
        self.ls = ls
        self.tilter_motor = tilter_motor
        self.scanner_motor = scanner_motor
        self.rotate_motor = rotate_motor

        # Brick
        self.leds = leds
        self.btn = btn
        
        # Cube
        self.setnet()
        self.cube_present = False
        self.done = False
    
    def setnet(self):
        self.cube = [
            0, 1, 2,
            3, 'R', 5, 
            6, 7, 8,

            9, 10, 11,
            12, 'B', 14, 
            15, 16, 17, 
            
            18, 19, 20, 
            21, 'W', 23,
            24, 25, 26, 

            27, 28, 29,
            30, 'G', 32, 
            33, 34, 35,

            36, 37, 38, 
            39, 'Y', 41, 
            42, 43, 44,

            45, 46, 47,
            48, 'O', 50, 
            51, 52, 53
        ]

    def Solve_Algorithm(self):
        # Solver - To learn
        # SolverResponse - decode solving info from algorithm
        # GetPattern - Determine all the faces of the cube
        # SetPattern - ??
        pass

    def detect_cube(self):
        if 6<int(self.uss.distance_centimeters)<10:
            self.cube_present = True

    def scanRGB(self):
        time.sleep(self.scanrgb_delay/1000)
        red = self.ls.red
        blue = self.ls.blue
        green = self.ls.green
        if not red + blue + green >= 0:
            self.scanrgb_delay = (self.scanrgb_delay+1)%20
            return red, blue, green
        return red, blue, green
    
    def collect_sm_data(self, data_rate = 0.2, batch_size = 6):
        
        datalog = []
        databatchno = 0
        for i in range(0,batch_size):
            datalog.append([])

        while True:
            
            self.leds.set_color('LEFT', 'GREEN')
            self.leds.set_color('RIGHT', 'GREEN')

            datalog[databatchno].append((self.ls.raw))
            time.sleep(data_rate)
            print(datalog[databatchno])

            if self.btn.enter:
                if databatchno == batch_size - 1: break
                else: databatchno += 1
                self.leds.set_color('LEFT','ORANGE')
                self.leds.set_color('RIGHT','ORANGE') 
                time.sleep(0.5)

                while not self.btn.enter:
                    pass
        print(datalog)
        
    # Test 
    def scan_fmid(self):
        self.scanner_motor.on_for_degrees(speed = -50, degrees = 730)

        # return self.determinecol(1)
    
    def determinecol(self,count):
        # Colors - Blue & Red & Green & Orange & White & Yellow
        colours = []
        coloursfiltered = []

        while not len(coloursfiltered) == count:
            time.sleep(0.2)
            if len(colours) > 0:
                if not self.ls.color_name[0] == colours[len(colours)-1]: continue
            coloursfiltered.append(self.ls.color_name[0])

        print(colours)
        print(coloursfiltered)
        return coloursfiltered
            

    def scan_ftabs(self):
        self.scanner_motor.on_for_degrees(speed = 20, degrees = 30)
        self.rotate_motor.on(speed = 20)
        faces = self.determinecol(8)
        self.rotate_motor.off()
        return faces

    def log_face(self):

        # Finding the matching colour face
        self.cuber.storetilter()
        self.scan_fmid()
        # faceoi = self.cube.index(self.scan_fmid())

        # # With the right face, input face values 
        # result = self.scan_ftabs()
        # recursion = 0
        # faceindex1 = faceoi - 3

        # while not recursion > 8:
        #     if not recursion == 0:
        #         faceindex1 += 1
        #     self.cube[faceindex1] = result[recursion]
        #     recursion += 1

    def CubeAbsent(self):
        self.program.program_seq(command = 'Remove Cube', seq = False)
        start_time = end_time = time.perf_counter()

        while (end_time - start_time) > 2:
            if not self.detect_cube():
                end_time = time.perf_counter()
    
    def CubePresent(self):
        self.program.program_seq(command = 'Insert Cube', seq = False)
        start_time = end_time = time.perf_counter()
        while (end_time - start_time) > 2:
            if self.detect_cube():
                end_time = time.perf_counter()
        self.done = True
    
