import time
import random


# Blue Face
colour_data = [[(27, 87, 167), (27, 87, 167), (27, 86, 167), (27, 86, 166), (26, 86, 166), (26, 85, 166), (27, 87, 167), (26, 85, 166), (27, 86, 167), (27, 87, 167), (27, 86, 167), (27, 86, 167), (27, 85, 166), (27, 87, 168), (27, 86, 167), (27, 87, 167), (27, 87, 167), (27, 87, 168), (26, 86, 166), (27, 87, 167), (27, 87, 168), (27, 87, 167), (27, 86, 167), (27, 87, 168), (27, 86, 168), (26, 86, 166), (27, 87, 167), (27, 87, 168), (27, 87, 167), (27, 87, 168), (27, 87, 168), (26, 86, 166), (27, 87, 167), (26, 86, 167), (27, 87, 168), (26, 86, 166), (27, 86, 168), (26, 86, 166), (27, 87, 167), (27, 86, 168), (27, 87, 168), (27, 87, 168), (26, 86, 167), (27, 87, 167), (27, 87, 168), (27, 87, 168), (26, 86, 167), (27, 86, 167), (27, 86, 168), (27, 87, 167), (27, 87, 168), (27, 87, 168), (27, 87, 167), (27, 87, 167), (27, 87, 167), (27, 87, 167), (27, 86, 168), (27, 87, 168), (26, 86, 167), (27, 87, 167), (26, 86, 166), (26, 86, 166), (26, 86, 167), (27, 87, 167), (27, 87, 168), (27, 87, 168), (26, 86, 166), (27, 87, 167), (27, 87, 167), (27, 87, 167), (27, 87, 167), (27, 87, 167), (27, 87, 167), (27, 87, 168), (27, 87, 167), (27, 87, 167), (27, 86, 168), (27, 87, 167), (27, 87, 167), (26, 86, 166)], 

# Orange Face
[(290, 350, 350), (292, 354, 353), (293, 355, 353), (293, 355, 354), (293, 353, 353), (292, 354, 352), (292, 353, 352), (292, 354, 352), (292, 354, 354), (292, 355, 355), (293, 354, 353), (291, 353, 352), (293, 354, 352), (292, 353, 353), (292, 353, 352), (291, 354, 354), (293, 355, 354), (292, 355, 354), (292, 354, 355), (292, 354, 352), (292, 355, 353), (292, 354, 352), (292, 354, 355), (292, 354, 354), (293, 356, 354), (293, 354, 352), (291, 353, 353), (290, 354, 353), (293, 354, 353), (292, 355, 354), (292, 353, 352), (293, 355, 354), (292, 353, 353), (293, 354, 352), (292, 354, 353), (291, 353, 353), (292, 354, 353), (291, 353, 353), (293, 356, 354), (292, 354, 353), (292, 353, 353), (293, 354, 353), (292, 355, 352), (293, 354, 353), (292, 355, 353), (293, 354, 353), (292, 354, 353), (292, 356, 354), (292, 355, 352), (292, 354, 352), (292, 354, 353), (293, 354, 355), (292, 353, 354), (293, 354, 352), (293, 356, 355), (293, 354, 355), (293, 354, 352), (293, 354, 352), (293, 354, 354), (292, 354, 352), (292, 354, 354), (293, 354, 355), (292, 355, 353), (291, 354, 353), (292, 353, 353)], 

# Green Face
[(34, 163, 225), (35, 168, 225), (36, 170, 226), (36, 170, 227), (35, 167, 226), (35, 168, 226), (36, 169, 227), (36, 169, 226), (35, 168, 225), (35, 168, 225), (35, 168, 226), (35, 167, 226), (36, 169, 227), (35, 168, 226), (35, 168, 226), (35, 168, 225), (36, 169, 225), (35, 168, 225), (35, 168, 225), (36, 169, 227), (36, 169, 226), (36, 169, 226), (35, 168, 225), (35, 168, 225), (36, 169, 227), (36, 169, 227), (36, 169, 226), (35, 168, 225), (36, 169, 227), (35, 169, 227), (35, 168, 225), (35, 168, 226), (34, 167, 224), (36, 169, 226), (35, 169, 227), (36, 169, 226), (35, 168, 225), (35, 168, 226), (35, 168, 225), (36, 169, 226), (35, 168, 225), (35, 168, 226), (35, 168, 225), (36, 169, 226), (35, 168, 225), (36, 169, 227), (36, 169, 227), (35, 167, 225), (36, 168, 226), (35, 168, 225), (35, 168, 225), (35, 168, 226), (36, 169, 227), (36, 169, 226), (35, 168, 225), (36, 169, 226), (35, 168, 226), (36, 169, 227), (36, 169, 227), (35, 168, 226), (36, 169, 226), (35, 169, 226), (36, 169, 227), (36, 169, 226), (36, 169, 227), (36, 169, 227), (35, 167, 225), (35, 168, 225), (36, 169, 227), (35, 168, 225), (35, 168, 226), (35, 168, 225), (35, 168, 225), (36, 169, 226), (36, 169, 226), (35, 168, 226), (35, 168, 225), (36, 167, 225), (35, 168, 226), (35, 168, 225), (35, 168, 225), (35, 167, 226), (35, 168, 225), (36, 168, 226), (35, 168, 226), (35, 168, 225), (35, 167, 225), (35, 167, 225), (35, 168, 225), (36, 169, 226), (36, 168, 226), (36, 169, 226)], 

# Red Face
[(241, 115, 49), (243, 115, 49), (243, 116, 48), (242, 115, 49), (243, 116, 49), (243, 116, 49), (243, 115, 48), (243, 115, 48), (242, 115, 48), (242, 115, 48), (242, 115, 49), (242, 115, 48), (242, 115, 48), (243, 115, 48), (243, 115, 48), (244, 116, 49), (243, 115, 49), (243, 116, 49), (243, 116, 49), (243, 115, 49), (244, 116, 48), (244, 117, 49), (243, 116, 49), (243, 116, 49), (243, 115, 49), (244, 115, 48), (243, 115, 49), (244, 117, 49), (243, 116, 49), (243, 116, 49), (243, 116, 49), (243, 116, 48), (243, 116, 48), (243, 116, 49), (243, 115, 49), (243, 115, 49), (243, 116, 49), (243, 116, 48), (244, 116, 49), (244, 115, 48), (244, 116, 48), (244, 115, 49), (244, 117, 49), (243, 116, 48), (244, 117, 49), (243, 116, 49), (243, 116, 48), (243, 115, 49), (243, 116, 50), (244, 116, 49), (243, 116, 48), (243, 116, 48), (244, 116, 48), (243, 115, 49), (244, 117, 50), (243, 116, 49), (244, 117, 50), (244, 117, 49), (243, 116, 49), (243, 115, 49), (244, 117, 49), (243, 115, 48), (244, 116, 48), (243, 116, 48), (243, 115, 49), (243, 116, 49), (244, 117, 49), (243, 116, 48), (243, 116, 49), (243, 116, 48), (243, 116, 49), (243, 115, 49), (243, 116, 48), (243, 116, 48), (243, 116, 48), (245, 117, 49), (243, 115, 48), (244, 117, 50), (243, 115, 48), (243, 116, 49), (243, 116, 48), (243, 116, 48), (243, 116, 48), (244, 116, 50), (243, 116, 48), (243, 115, 48), (243, 116, 49), (243, 115, 49), (244, 117, 50), (243, 115, 49), (244, 117, 49), (244, 116, 48), (243, 116, 49), (243, 116, 48), (243, 116, 49), (243, 116, 48), (243, 115, 48), (243, 116, 48), (243, 116, 49), (242, 114, 47), (243, 115, 48), (243, 116, 49), (243, 115, 48), (244, 116, 48), (243, 116, 48), (243, 115, 49), (244, 116, 48), (243, 116, 48), (243, 116, 49), (243, 116, 49)], 

#White Face
[(206, 275, 253), (222, 286, 262), (219, 284, 262), (214, 280, 258), (220, 283, 261), (217, 282, 260), (219, 283, 262), (216, 282, 259), (218, 283, 261), (220, 284, 261), (218, 281, 261), (217, 282, 260), (217, 282, 259), (215, 281, 259), (216, 282, 261), (218, 282, 260), (218, 284, 261), (215, 282, 259), (217, 282, 260), (222, 285, 263), (216, 281, 260), (223, 287, 263), (217, 282, 260), (218, 284, 261), (219, 284, 261), (220, 285, 263), (221, 284, 262), (220, 285, 261), (220, 284, 262), (219, 285, 262), (218, 284, 260), (219, 284, 260), (218, 284, 260), (219, 284, 260), (219, 284, 260), (219, 283, 260), (218, 283, 261), (219, 285, 262), (219, 284, 260), (219, 284, 263), (220, 285, 261), (220, 284, 262), (220, 285, 262), (220, 286, 263), (219, 284, 262), (219, 285, 262), (220, 285, 262), (220, 284, 261), (220, 284, 261), (220, 284, 261), (219, 283, 261), (220, 284, 262), (219, 284, 260), (220, 284, 262), (218, 284, 261), (219, 285, 261), (220, 284, 261), (218, 285, 261), (219, 285, 262), (219, 285, 263), (218, 283, 261), (219, 284, 261), (218, 284, 261), (220, 285, 261), (219, 285, 262), (219, 285, 262), (219, 285, 262), (219, 284, 261), (220, 285, 262), (219, 284, 262), (218, 283, 261), (219, 284, 260), (218, 284, 260), (220, 284, 261), (219, 285, 262), (220, 285, 262), (219, 285, 262), (219, 284, 262), (218, 284, 261), (219, 285, 262), (219, 283, 260), (220, 284, 262), (219, 284, 262), (218, 284, 260), (220, 284, 261), (220, 286, 263), (218, 284, 260), (218, 283, 260), (220, 284, 261), (219, 284, 261), (220, 285, 262), (220, 284, 261), (220, 285, 262), (219, 284, 262), (219, 284, 260), (220, 284, 261), (218, 284, 261), (220, 284, 262), (219, 284, 260), (219, 283, 261), (220, 284, 261), (220, 284, 262), (219, 284, 263), (220, 285, 262), (219, 284, 261), (219, 284, 261), (218, 283, 260), (220, 285, 262), (218, 284, 261), (220, 285, 261), (218, 285, 260), (220, 285, 262), (219, 285, 261), (219, 284, 262), (219, 285, 262), (220, 284, 260), (220, 284, 261), (220, 285, 262), (219, 284, 262), (220, 284, 261), (218, 283, 261), (219, 285, 261), (219, 284, 261), (219, 284, 260), (220, 284, 262), (219, 285, 262), (220, 285, 261), (218, 285, 262), (220, 285, 262), (220, 284, 261), (218, 284, 262), (220, 285, 262), (219, 284, 261), (220, 284, 262), (219, 283, 262), (218, 284, 262), (220, 285, 262), (220, 285, 262), (220, 285, 261), (220, 285, 262), (220, 285, 262), (220, 284, 261), (222, 286, 263), (221, 287, 264), (222, 286, 262), (221, 287, 263), (221, 286, 262), (223, 286, 263), (222, 286, 263), (220, 285, 262), (210, 278, 256), (220, 285, 262), (218, 283, 259), (219, 284, 261), (218, 283, 260), (218, 285, 261)], 

# Yellow Face
[(276, 307, 318), (277, 310, 318), (279, 314, 321), (279, 313, 320), (279, 312, 319), (279, 311, 319), (278, 312, 319), (278, 312, 320), (279, 313, 321), (279, 312, 319), (279, 312, 319), (278, 312, 320), (278, 312, 319), (279, 313, 319), (278, 313, 319), (279, 313, 320), (278, 313, 320), (279, 312, 319), (279, 313, 319), (278, 313, 319), (279, 312, 319), (279, 312, 319), (279, 312, 319), (279, 313, 318), (279, 312, 319), (279, 312, 319), (279, 313, 321), (279, 313, 318), (279, 312, 321), (279, 312, 319), (280, 313, 319), (278, 312, 319), (278, 313, 319), (279, 312, 319), (280, 314, 321), (278, 312, 319), (279, 313, 318), (279, 313, 319), (279, 313, 320), (278, 313, 320), (279, 313, 320), (279, 312, 320), (280, 313, 319), (278, 313, 320), (278, 313, 319), (278, 312, 320), (277, 311, 318), (279, 312, 319), (279, 312, 319), (279, 313, 319), (280, 312, 319), (278, 312, 320), (278, 312, 320), (279, 312, 319), (280, 312, 321), (278, 312, 320), (278, 312, 319), (279, 312, 319), (279, 312, 319), (279, 314, 321), (278, 312, 320), (280, 313, 321), (279, 312, 319), (278, 312, 320), (279, 312, 320), (278, 312, 320), (279, 312, 319), (280, 313, 320), (279, 313, 319), (278, 313, 320), (279, 312, 319), (279, 313, 319), (279, 313, 319), (278, 312, 320), (280, 313, 319), (279, 312, 320), (279, 313, 319), (278, 312, 320), (279, 313, 321), (279, 312, 320), (279, 314, 321), (277, 313, 320), (278, 311, 320), (280, 313, 321), (278, 312, 320), (278, 312, 320), (279, 312, 319), (279, 312, 320), (279, 311, 319), (279, 313, 320), (279, 313, 319), (279, 313, 320), (279, 311, 320), (279, 313, 319), (279, 313, 321), (278, 312, 319), (278, 313, 319), (279, 313, 320), (278, 313, 320), (279, 312, 320), (279, 313, 320), (279, 312, 319), (279, 312, 319), (278, 312, 320), (278, 313, 319), (278, 312, 319), (279, 312, 319), (278, 313, 319), (279, 313, 319), (278, 313, 319), (278, 311, 319), (279, 313, 320), (279, 314, 320), (280, 313, 320), (279, 312, 319), (279, 313, 321), (278, 313, 319), (279, 312, 320), (278, 312, 318), (279, 312, 319), (279, 313, 321), (279, 313, 319), (279, 313, 319), (278, 313, 320), (279, 312, 319), (278, 311, 320), (279, 311, 320), (279, 312, 320)]]

dataset_labels = ['Blue', 'Orange', 'Green', 'Red', 'White', 'Yellow']

def colour_analyse(colourdata, label):
    count = 0
    r_total = 0
    g_total = 0
    b_total = 0

    for rgbvalue in colourdata:
        r_total += colourdata[count][0]
        g_total += colourdata[count][1]
        b_total += colourdata[count][2]

        count += 1

    return round(r_total/count), round(b_total/count), round(g_total/count), round((r_total + g_total + b_total)/3/count)

# Analysing Values 
# for i in range(0, len(colour_data)):
#     a, b, c, d = colour_analyse(colour_data[i], dataset_labels[i])
    
#     print("{colour}: avgRGB = {tuple}, sum = {sum}".format(colour = dataset_labels[i], tuple = (a, b, c), sum = d))

'''
Blue: avgRGB = (27, 167, 87), sum = 93
Orange: avgRGB = (292, 353, 354), sum = 333
Green: avgRGB = (35, 226, 168), sum = 143
Red: avgRGB = (243, 49, 116), sum = 136
White: avgRGB = (219, 261, 284), sum = 255
Yellow: avgRGB = (279, 320, 312), sum = 304
'''

def determinecol(rgb):
    
    if not type(rgb) == tuple:
        raise TypeError('rgb tuple')
    # Properties used to identify colours
    # Distinctive Colours
        # Blue - total < 100
        # Orange - total > 320
        # White - total close to 250
        # Yellow - 320 > total > 280
    
    # Non-Distinctive Colours  (Condition: If 200 > total > 100 )
        # Green - most distinctive colour: G, B
        # Red - most distinctive colour: R, G
    r,g,b = rgb

    rgbtotal = (r + g + b)/3
    colour = None
    
    if rgbtotal < 100: colour = 'Blue'
    elif rgbtotal > 320: colour = 'Orange'
    elif 320 > rgbtotal > 280: colour = 'Yellow'
    elif 200 > rgbtotal > 100: 
        if g > r:
            colour = 'Green'
        elif r > g:
            colour = 'Red'
    else:
        colour = 'White'
    
    return colour

# Running and Testing determinecol()

def experiment(batchsize):
    right = 0

    for i in range(0, batchsize):
        rngcolno = random.randint(0, len(dataset_labels)-1)
        rngcol = dataset_labels[rngcolno]
        rngvalno = random.randint(0, len(colour_data[rngcolno])-1)
        
        colresult = determinecol(colour_data[rngcolno][rngvalno])
    
        if colresult == rngcol:
            right += 1
        else:
            print(colresult, rngcol)
        
    accuracy = right/batchsize
    return accuracy

print(experiment(50))



    
    
